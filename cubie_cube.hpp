#include <array>
#include <iostream>

class CubieCube
{
public:
  uint cp [8] {0,1,2,3,4,5,6,7};
  uint co [8] {0,0,0,0,0,0,0,0};
  uint ep [12] {0,1,2,3,4,5,6,7,8,9,10,11};
  uint eo [12] {0,0,0,0,0,0,0,0,0,0,0,0};

  void show() const;
  void corner_apply(CubieCube);
  void edge_apply(CubieCube);
  void apply(std::string);
  CubieCube(){};
  CubieCube(std::initializer_list<uint> cp_in, std::initializer_list<uint> co_in, std::initializer_list<uint> ep_in, std::initializer_list<uint> eo_in)
  {
    for(int i=0;i<8;i++)
    {
      cp[i] = *(cp_in.begin()+i);
      co[i] = *(co_in.begin()+i);
    }

    for(int i=0;i<12;i++)
    {
      ep[i] = *(ep_in.begin()+i);
      eo[i] = *(eo_in.begin()+i);
    }
  }
};

const CubieCube U
{
  {1,2,3,0,4,5,6,7},
  {0,0,0,0,0,0,0,0},
  {1,2,3,0,4,5,6,7,8,9,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube U2
{
  {2,3,0,1,4,5,6,7},
  {0,0,0,0,0,0,0,0},
  {2,3,0,1,4,5,6,7,8,9,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube U3
{
  {3,0,1,2,4,5,6,7},
  {0,0,0,0,0,0,0,0},
  {3,0,1,2,4,5,6,7,8,9,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube D
{
  {0,1,2,3,7,4,5,6},
  {0,0,0,0,0,0,0,0},
  {0,1,2,3,4,5,6,7,11,8,9,10},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube D2
{
  {0,1,2,3,6,7,4,5},
  {0,0,0,0,0,0,0,0},
  {0,1,2,3,4,5,6,7,10,11,8,9},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube D3
{
  {0,1,2,3,5,6,7,4},
  {0,0,0,0,0,0,0,0},
  {0,1,2,3,4,5,6,7,9,10,11,8},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube R
{
  {0,5,1,3,4,6,2,7},
  {0,2,1,0,0,1,2,0},
  {0,5,2,3,4,9,1,7,8,6,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube R2
{
  {0,6,5,3,4,2,1,7},
  {0,0,0,0,0,0,0,0},
  {0,9,2,3,4,6,5,7,8,1,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube R3
{
  {0,2,6,3,4,1,5,7},
  {0,2,1,0,0,1,2,0},
  {0,6,2,3,4,1,9,7,8,5,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0},
};

const CubieCube L
{
  {3,1,2,7,0,5,6,4},
  {1,0,0,2,2,0,0,1},
  {0,1,2,7,3,5,6,11,8,9,10,4},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube L2
{
  {7,1,2,4,3,5,6,0},
  {0,0,0,0,0,0,0,0},
  {0,1,2,11,7,5,6,4,8,9,10,3},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube L3
{
  {4,1,2,0,7,5,6,3},
  {1,0,0,2,2,0,0,1},
  {0,1,2,4,11,5,6,3,8,9,10,7},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube F
{
  {4,0,2,3,5,1,6,7},
  {2,1,0,0,1,2,0,0},
  {4,1,2,3,8,0,6,7,5,9,10,11},
  {1,0,0,0,1,1,0,0,1,0,0,0}
};

const CubieCube F2
{
  {5,4,2,3,1,0,6,7},
  {0,0,0,0,0,0,0,0},
  {8,1,2,3,5,4,6,7,0,9,10,11},
  {0,0,0,0,0,0,0,0,0,0,0,0},
};

const CubieCube F3
{
  {1,5,2,3,0,4,6,7},
  {2,1,0,0,1,2,0,0},
  {5,1,2,3,0,8,6,7,4,9,10,11},
  {1,0,0,0,1,1,0,0,1,0,0,0}
};

const CubieCube B
{
  {0,1,6,2,4,5,7,3},
  {0,0,2,1,0,0,1,2},
  {0,1,6,3,4,5,10,2,8,9,7,11},
  {0,0,1,0,0,0, 1,1,0,0,1, 0}
};

const CubieCube B2
{
  {0,1,7,6,4,5,3,2},
  {0,0,0,0,0,0,0,0},
  {0,1,10,3,4,5,7,6,8,9,2,11},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube B3
{
  {0,1,3,7,4,5,2,6},
  {0,0,2,1,0,0,1,2},
  {0,1,7,3,4,5,2,10,8,9,6,11},
  {0,0,1,0,0,0,1,1,0,0,1,0}
};

const CubieCube S_URF // 120Â° clockwise rotation around an axis through the URF and DLB corners
{
  {5,1,0,4,6,2,3,7},
  {2,1,2,1,1,2,1,2},
  {5,0,4,8,9,1,3,11,6,2,7,10},
  {0,1,0,1,1,1,1,1,0,1,0,1}
};

const CubieCube S_URF2
{
  {2,1,5,6,3,0,4,7},
  {1,2,1,2,2,1,2,1},
  {1,5,9,6,2,0,8,10,3,4,11,7},
  {1,1,1,1,0,0,0,0,1,1,1,1}
};

const CubieCube S_z2 // The z2 cube rotation
{
  {5,4,7,6,1,0,3,2},
  {0,0,0,0,0,0,0,0},
  {8,9,10,11,5,4,7,6,0,1,2,3},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube S_y // The y cube rotation
{
  {1,2,3,0,5,6,7,4},
  {0,0,0,0,0,0,0,0},
  {1,2,3,0,5,6,7,4,9,10,11,8},
  {0,0,0,0,1,1,1,1,0,0,0,0}
};

const CubieCube S_y2
{
  {2,3,0,1,6,7,4,5},
  {0,0,0,0,0,0,0,0},
  {2,3,0,1,6,7,4,5,10,11,8,9},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};

const CubieCube S_y3
{
  {3,0,1,2,7,4,5,6},
  {0,0,0,0,0,0,0,0},
  {3,0,1,2,7,4,5,6,11,8,9,10},
  {0,0,0,0,1,1,1,1,0,0,0,0}
};

const CubieCube S_LR // A plane symmetry about the M-slice
{
  {1,0,3,2,5,4,7,6},
  {0,0,0,0,0,0,0,0},
  {0,3,2,1,5,4,7,6,8,11,10,9},
  {0,0,0,0,0,0,0,0,0,0,0,0}
};


const std::array<CubieCube, 18> moves {U, U2, U3, D, D2, D3, R, R2, R3, L, L2, L3, F, F2, F3, B, B2, B3};
const std::array<CubieCube, 6> cw_turns{U, D, R, L, F, B};
